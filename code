clc;clear;close all;	
load('R_27_Jan_2024_20_53_18.mat')	
	
data_str=G_out_data.data_path_str ;  	
dataO=readtable(data_str,'VariableNamingRule','preserve');
data1=dataO(:,2:end);test_data=table2cell(dataO(1,2:end));	
for i=1:length(test_data)	
      if ischar(test_data{1,i})==1	
          index_la(i)=1;    
      elseif isnumeric(test_data{1,i})==1	
          index_la(i)=2;    	
      else	
        index_la(i)=0;  
    end 	
end	
index_char=find(index_la==1);index_double=find(index_la==2);	
	
 if length(index_double)>=1	
    data_numshuju=table2array(data1(:,index_double));	
    index_double1=index_double;	
	
    index_double1_index=1:size(data_numshuju,2);	
    data_NAN=(isnan(data_numshuju));    
    num_NAN_ROW=sum(data_NAN);	
    index_NAN=num_NAN_ROW>round(0.2*size(data1,1));	
    index_double1(index_NAN==1)=[]; index_double1_index(index_NAN==1)=[];	
    data_numshuju1=data_numshuju(:,index_double1_index);	
    data_NAN1=(isnan(data_numshuju1));  
     num_NAN__COL=sum(data_NAN1');	
     index_NAN1=num_NAN__COL>0;	
     index_double2_index=1:size(data_numshuju,1);	
     index_double2_index(index_NAN1==1)=[];	
     data_numshuju2=data_numshuju1(index_double2_index,:);	
     index_need_last=index_double1;	
 else	
   index_need_last=[];	
  data_numshuju2=[];	
end	
	
	
data_shuju=[];	
 if length(index_char)>=1	
  for j=1:length(index_char)	
    data_get=table2array(data1(index_double2_index,index_char(j)));	
    data_label=unique(data_get);	
if j==length(index_char)	
  data_label_str=data_label ;	
 end    	
	
    for NN=1:length(data_label)	
            idx = find(ismember(data_get,data_label{NN,1}));  	
            data_shuju(idx,j)=NN; 	
     end	
  end	
 end	
label_all_last=[index_char,index_need_last];	
[~,label_max]=max(label_all_last);	
 if(label_max==length(label_all_last))	
     str_label=0; 
     data_all_last=[data_shuju,data_numshuju2];	
     label_all_last=[index_char,index_need_last];	
 else	
    str_label=1;	
    data_all_last=[data_numshuju2,data_shuju];	
    label_all_last=[index_need_last,index_char];     	
 end	
   data=data_all_last;	
   data_biao_all=data1.Properties.VariableNames;	
   for j=1:length(label_all_last)	
     data_biao{1,j}=data_biao_all{1,label_all_last(j)};	
   end	
	

data=data;	
		
  A_data1=data;	
 data_biao1=data_biao;	
 select_feature_num=G_out_data.select_feature_num1;   
	
data_select=A_data1;	
feature_need_last=1:size(A_data1,2)-1;	
	
	
	
	
  x_feature_label=data_select(:,1:end-1);   
  y_feature_label=data_select(:,end);         
 index_label1=1:(size(x_feature_label,1));	
 index_label=G_out_data.spilt_label_data;  
 if isempty(index_label)	
     index_label=index_label1;	
 end	
spilt_ri=G_out_data.spilt_rio; 
train_num=round(spilt_ri(1)/(sum(spilt_ri))*size(x_feature_label,1));        
vaild_num=round((spilt_ri(1)+spilt_ri(2))/(sum(spilt_ri))*size(x_feature_label,1)); 
 train_x_feature_label=x_feature_label(index_label(1:train_num),:);	
 train_y_feature_label=y_feature_label(index_label(1:train_num),:);	
 vaild_x_feature_label=x_feature_label(index_label(train_num+1:vaild_num),:);	
vaild_y_feature_label=y_feature_label(index_label(train_num+1:vaild_num),:);	
 test_x_feature_label=x_feature_label(index_label(vaild_num+1:end),:);	
 test_y_feature_label=y_feature_label(index_label(vaild_num+1:end),:);	

 x_mu = mean(train_x_feature_label);  x_sig = std(train_x_feature_label); 	
 train_x_feature_label_norm = (train_x_feature_label - x_mu) ./ x_sig;   	
 y_mu = mean(train_y_feature_label);  y_sig = std(train_y_feature_label); 	
train_y_feature_label_norm = (train_y_feature_label - y_mu) ./ y_sig;     	
 vaild_x_feature_label_norm = (vaild_x_feature_label - x_mu) ./ x_sig;   	
 vaild_y_feature_label_norm=(vaild_y_feature_label - y_mu) ./ y_sig; 	
test_x_feature_label_norm = (test_x_feature_label - x_mu) ./ x_sig;   
 test_y_feature_label_norm = (test_y_feature_label - y_mu) ./ y_sig;   	

  t1=clock;	
disp('MLP-RF')	
 [Model_MLP,fitness] = optimize_fitrMLP(train_x_feature_label_norm,train_y_feature_label_norm,vaild_x_feature_label_norm,vaild_y_feature_label_norm,num_pop,num_iter,method_mti);    	
 [Model_RF,fitness] = optimize_fitrtreebag1(train_x_feature_label_norm,train_y_feature_label_norm,vaild_x_feature_label_norm,vaild_y_feature_label_norm,num_pop,num_iter,method_mti);   	
	
 	
 	
 	
 	
  	
y_train_predict_norm_RF= predict(Model_RF,train_x_feature_label_norm); 	
y_train_predict_norm_MLP= predict(Model_MLP,train_x_feature_label_norm);	
y_vaild_predict_norm_RF= predict(Model_RF,vaild_x_feature_label_norm);	
y_vaild_predict_norm_MLP= predict(Model_MLP,vaild_x_feature_label_norm); 	
y_test_predict_norm_RF= predict(Model_RF,test_x_feature_label_norm); 	
y_test_predict_norm_MLP= predict(Model_MLP,test_x_feature_label_norm); 	
 	
errors_MLP=sum(abs(y_vaild_predict_norm_MLP*y_sig+y_mu-vaild_y_feature_label))/length(vaild_y_feature_label) ;  	
errors_RF=sum(abs(y_vaild_predict_norm_RF*y_sig+y_mu-vaild_y_feature_label))/length(vaild_y_feature_label) ;  	
  	
 if abs((errors_RF-errors_MLP)/max(errors_RF,errors_MLP))<0.1 	
      quan1=errors_MLP/(errors_RF+errors_MLP);quan2=errors_RF/(errors_RF+errors_MLP); 	
	
else 	
     if(errors_RF>errors_MLP)	
       quan1=0;quan2=1;     	
     else  	
     quan1=1;quan2=0; 	
     end 	
  end	
  	
 Mdl{1,1}=Model_RF; Mdl{1,2}=Model_MLP; Mdl{1,3}=[quan1,quan2]; 	
 y_train_predict_norm=quan1*y_train_predict_norm_RF+quan2*y_train_predict_norm_MLP; 	
y_vaild_predict_norm=quan1*y_vaild_predict_norm_RF+quan2*y_vaild_predict_norm_MLP; 	
y_test_predict_norm=quan1*y_test_predict_norm_RF+quan2*y_test_predict_norm_MLP; 	
y_test_predict_MLP_RF=y_test_predict_norm*y_sig+y_mu; 	
y_test_predict_RF=y_test_predict_norm_RF*y_sig+y_mu; 	
y_test_predict_MLP=y_test_predict_norm_MLP*y_sig+y_mu;  	
	
 
